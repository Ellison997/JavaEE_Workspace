<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
   <script type="text/javascript">
       var sum = 0;         //变量声明后，使用前一定要赋值，否则就是undefined
       for (var i = 0; i < 101; i++) {
           sum = sum + i;
       }
       alert(sum);

       var n1 = true;
       var n2 = 'false';
       alert(n1 == n2);
       alert(n1 === n2);

       var s = 123;
       //switch 内部也是使用===严格等于来判断是否相等的
       switch (s) {
           case '123':
               alert('等于字符串123');
               break;
           case 123:
               alert('等于数字123');
               break;
           default:
               alert('没有找到相等的值。');
               break;

       }

       //null 和undefined
       //1、当声明变量未赋值的 时候，那么变量的值就是undefined
       var x;
       alert(x);

       //-----------------------------
       //2、变量压根没有声明。
       //alert(w);        //使用没有声明的变量的时候浏览器会报错
       //在使用变量之前先校验变量是否可用
       if (typeof (w) == 'undefined') {
           alert('变量不可用');
       }
       else {
           alert(w);
       }

       //3、方法没有返回值的时候，接收的返回的就是undefined
       var nn = fun1();
       alert(nn);

       function fun1() { }

       //------------null---------------
       //null值表示指向了一个“空对象”，需要我们为n赋值一个null值。
       //什么情况下需要显示为变量赋值一个null值？ 一般在一个对象使用完毕。需要显示告诉浏览器可以被垃圾回收的情况下，需要显示把变量赋值为null,
       //这样这个变量所指的对象就可以被垃圾回收了。
       //var nnn= null;

       //无论变量的值是null值还是undefined 都表示该变量不可用。所以在使用某些变量前可以对变量做校验，判断该变量是否可用。

       //如何校验一个变量是否可用？
       var x = null;
       if (typeof(x)!='undefined' && x!=null) {
       alert('该变量可用！');

       }
       else {
    alert('该变量不可用啊，检查一下吧！')
}

   </script>
</head>
<body>

</body>
</html>
